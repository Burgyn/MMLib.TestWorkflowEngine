---
description: programming, code analysis, design
globs: 
alwaysApply: true
---
# .NET Development Rules - Guide

## Basic Principles
- **Developer Profile:** Follow the approach of a senior developer with specialization in:
  - C# and .NET 8
  - Microsoft SQL Server
  - Kros.KORM ORM framework
  - Microsoft Azure

## Technology Foundation
### C# and .NET
- **Versions:** Exclusively use the latest versions:
  - C# 12 (or higher, if available)
  - .NET 8 (or higher, if available)
  - Current library versions
- **Import Management:** Automatically add appropriate `using` declarations when integrating new classes

## Project Structure
Follow this standardized structure when creating or modifying projects:

```
ðŸ“‚ src
â”œâ”€â”€ ðŸ“‚ ApiGateways/
â”‚   â”œâ”€â”€ ðŸ“‚ Libs/
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ Kros.Esw.ApiGateway.Base/
â”‚   â”‚   â”‚   â”œâ”€â”€ ðŸ“„ Project: Kros.Esw.ApiGateway.Base.csproj
â”‚   â”‚   â”‚   â””â”€â”€ ðŸ§ª Tests: Kros.Esw.ApiGateway.Base.Tests
â”‚   â”œâ”€â”€ ðŸ“‚ Kros.Esw.DesktopInternal.ApiGateway/
â”‚   â”‚   â”œâ”€â”€ ðŸ“„ Project: Kros.Esw.DesktopInternal.ApiGateway.csproj
â”‚   â”‚   â”œâ”€â”€ ðŸ§ª Tests: Kros.Esw.DesktopInternal.ApiGateway.Tests
â”‚   â”‚   â””â”€â”€ ðŸ“˜ Solution Filter: DesktopInternal.ApiGateway.slnf
â”‚   â”œâ”€â”€ ðŸ“‚ Kros.Esw.Invoicing.ApiGateway/
â”‚   â”‚   â”œâ”€â”€ ðŸ“„ Project: Kros.Esw.Invoicing.ApiGateway.csproj
â”‚   â”‚   â”œâ”€â”€ ðŸ§ª Tests: Kros.Esw.Invoicing.ApiGateway.Tests
â”‚   â”‚   â””â”€â”€ ðŸ“˜ Solution Filter: Invoicing.ApiGateway.slnf
â”‚   â””â”€â”€ ðŸ“‚ Kros.Esw.OpenApiGateway/
â”‚       â”œâ”€â”€ ðŸ“„ Project: Kros.Esw.OpenApiGateway.csproj
â”‚       â”œâ”€â”€ ðŸ§ª Tests: Kros.Esw.OpenApiGateway.Tests
â”‚       â””â”€â”€ ðŸ“˜ Solution Filter: OpenApiGateway.slnf
â”‚
â”œâ”€â”€ ðŸ“‚ Libs/
â”‚   â”œâ”€â”€ ðŸ“‚ Kros.AspNetCore.JsonPatch/
â”‚   â”‚   â”œâ”€â”€ ðŸ“„ Project: Kros.AspNetCore.JsonPatch.csproj
â”‚   â”‚   â”œâ”€â”€ ðŸ§ª Tests: Kros.AspNetCore.JsonPatch.Tests
â”‚   â”‚   â””â”€â”€ ðŸ“˜ Solution Filter: JsonPatch.slnf
â”‚   â”œâ”€â”€ ðŸ“‚ Kros.Esw.Authorization.Base/
â”‚   â”‚   â”œâ”€â”€ ðŸ“„ Project: Kros.Esw.Authorization.Base.csproj
â”‚   â”‚   â”œâ”€â”€ ðŸ§ª Tests: Kros.Esw.Authorization.Base.Tests
â”‚   â”‚   â””â”€â”€ ðŸ“˜ Solution Filter: Authorization.Base.slnf
â”‚   â”œâ”€â”€ ðŸ“‚ Kros.Esw.Base.Blobs/
â”‚   â”‚   â”œâ”€â”€ ðŸ“„ Project: Kros.Esw.Base.Blobs.csproj
â”‚   â”‚   â”œâ”€â”€ ðŸ§ª Tests: Kros.Esw.Base.Blobs.Tests
â”‚   â”‚   â””â”€â”€ ðŸ“˜ Solution Filter: Blobs.slnf
â”‚   â”œâ”€â”€ ðŸ“‚ Kros.Esw.Base.CosmosDb/
â”‚   â”‚   â”œâ”€â”€ ðŸ“„ Project: Kros.Esw.Base.CosmosDb.csproj
â”‚   â”‚   â”œâ”€â”€ ðŸ§ª Tests: Kros.Esw.Base.CosmosDb.Tests
â”‚   â”‚   â””â”€â”€ ðŸ“˜ Solution Filter: CosmosDb.slnf
â”‚   â””â”€â”€ ðŸ“‚ Kros.Esw.Base.ProblemDetails/
â”‚       â”œâ”€â”€ ðŸ“„ Project: Kros.Esw.Base.ProblemDetails.csproj
â”‚       â”œâ”€â”€ ðŸ§ª Tests: Kros.Esw.Base.ProblemDetails.Tests
â”‚       â””â”€â”€ ðŸ“˜ Solution Filter: ProblemDetails.slnf
â”‚
â”œâ”€â”€ ðŸ“‚ Services/
â”‚   â”œâ”€â”€ ðŸ“‚ Functions/
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ Kros.AzFunHardDelete/
â”‚   â”‚   â”‚   â”œâ”€â”€ ðŸ“„ Project: Kros.AzFunHardDelete.csproj
â”‚   â”‚   â”‚   â”œâ”€â”€ ðŸ§ª Tests: Kros.AzFunHardDelete.Tests
â”‚   â”‚   â”‚   â””â”€â”€ ðŸ“˜ Solution Filter: Functions.slnf
â”‚   â”œâ”€â”€ ðŸ“‚ Authorization
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ Libs
â”‚   â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ Kros.Esw.Authorization.Api/
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ðŸ“„ Project: Kros.Esw.Authorization.Api.csproj
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ ðŸ§ª Tests: Kros.Esw.Authorization.Api.Tests
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ Kros.Esw.Companies/
â”‚   â”‚   â”‚   â”œâ”€â”€ ðŸ“„ Project: Kros.Esw.Companies.csproj
â”‚   â”‚   â”‚   â””â”€â”€ ðŸ§ª Tests: Kros.Esw.Companies.Tests
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ Kros.Esw.Authorization/
â”‚   â”‚   â”‚   â”œâ”€â”€ ðŸ“„ Project: Kros.Esw.Authorization.csproj
â”‚   â”‚   â”‚   â””â”€â”€ ðŸ§ª Tests: Kros.Esw.Authorization.Tests
â”‚   â”‚   â””â”€â”€ ðŸ“˜ Solution Filter: Authorization.slnf
â”‚   â”œâ”€â”€ ðŸ“‚ Catalog
â”‚   â”‚   â”œâ”€â”€ ðŸ“„ Project: Kros.Esw.Catalog.csproj
â”‚   â”‚   â””â”€â”€ ðŸ§ª Tests: Kros.Esw.Catalog.Tests
â”‚   â”‚   â””â”€â”€ ðŸ“˜ Solution Filter: Catalog.slnf
â””â”€â”€ ðŸ“‚ tests/
    â”œâ”€â”€ ðŸ“‚ ArchTests/
    â”‚   â””â”€â”€ ðŸš€ Kros.Esw.ArchTests/
    â”‚       â”œâ”€â”€ ðŸ“„ Project: Kros.Esw.ArchTests.csproj
    â”‚       â””â”€â”€ ðŸ§ª Tests: Kros.Esw.ArchTests.Tests
    â””â”€â”€ ðŸ“‚ Postman/
        â””â”€â”€ ðŸ“„ Authorization.json
```

### Rules for Project Structure
1. **Directories:** Each service or library contains a project, unit tests, and a solution filter for faster project loading. However, the solution also contains tests in the /tests directory, which are part of the legacy structure. If you create tests for existing services, create them according to the old structure.
2. **Code Integration:** 
   - Never integrate an app service or function app directly into another service
   - Before creating new file structure, make sure files being created do not exist elsewhere.
   - First look for an appropriate library (lib) and then integrate it. If suitable library does not exist, create one.
3. **New Projects:** When the user requests to create a new project, decline this request and tell them to create project file manualy and only after then you may proceed.

### Build and Package Management
- **Central Package Management**: When including external libraries, use central package management along with a Directory.Build.props file for managing package versions.
- **Build System**: Use NUKE as the build system.
- **Affected Projects**: Utilize dotnet-affected to identify impacted projects.

## Performance Optimization
- Implement code with consideration for its performance and efficient use of resources
- Avoid unnecessary object allocations and inefficient algorithms

## Documentation
- Document all public classes and methods using XML documentation comments
- Format: `/// <summary>...</summary>` and other relevant XML tags
